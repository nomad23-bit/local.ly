<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LOCAL.LY - Dein regionaler Marktplatz</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --main-green: #0C4B16; /* Dein gewünschtes dunkles Grün */
            --light-green: #cfe8d2; /* Helleres Grün, angepasst an main-green */
            --dark-green: #0C4B16;  /* Für Konsistenz, da main-green schon sehr dunkel ist */
            --earth-tone: #D4A373; 
            --light-earth: #F3E9DC;
            --text-color: #333;
            --nav-bg: #F8F9FA; 
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: var(--text-color);
            background-color: var(--light-earth);
            margin: 0;
            padding-bottom: 70px; /* Platz für fixe Navigation */
        }
        .header {
            background-color: var(--main-green);
            color: white;
            padding: 1rem;
            text-align: center;
            font-size: 1.5rem;
            font-weight: bold;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .nav-bar {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: var(--nav-bg);
            display: flex;
            justify-content: space-around;
            align-items: center;
            padding: 0.5rem 0;
            border-top: 1px solid #ddd;
            box-shadow: 0 -2px 5px rgba(0,0,0,0.05);
            z-index: 1000;
        }
        .nav-item {
            cursor: pointer;
            padding: 0.5rem 1rem;
            color: var(--dark-green);
            font-size: 1.5rem; 
            transition: color 0.3s;
        }
        .nav-item.active, .nav-item:hover {
            color: var(--earth-tone);
        }
        .page {
            display: none; 
            padding: 1rem;
            max-width: 900px;
            margin: 0 auto;
        }
        .page.active {
            display: block;
        }
        .card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin-bottom: 1rem;
            overflow: hidden;
        }
        .card-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }
        .card-content {
            padding: 1rem;
        }
        .card-title {
            font-size: 1.25rem;
            font-weight: bold;
            color: var(--dark-green);
            margin-bottom: 0.5rem;
        }
        .button {
            background-color: var(--earth-tone);
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s;
            text-align: center;
        }
        .button:hover {
            background-color: #c3905c;
        }
        .button-secondary {
            background-color: var(--main-green);
        }
        .button-secondary:hover {
            background-color: #083710; /* Leicht abgedunkeltes main-green */
        }
        .product-price-note {
            font-size: 0.8rem;
            color: #777;
            margin-top: 0.25rem;
        }
        .quiz-option {
            display: block;
            background-color: var(--light-green);
            padding: 0.75rem;
            margin-bottom: 0.5rem;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            border: 2px solid transparent;
        }
        .quiz-option:hover {
            background-color: #b9d9c1; /* Angepasstes Hover für light-green */
        }
        .quiz-option.selected {
            background-color: var(--dark-green) !important;
            color: white;
            border-color: var(--earth-tone);
        }
        .quiz-option.correct {
            background-color: #4CAF50 !important; 
            color: white;
        }
        .quiz-option.incorrect {
            background-color: #F44336 !important; 
            color: white;
        }
        .lesson-card {
            background-color: var(--light-green);
            border: 2px solid var(--main-green);
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 8px;
            cursor: pointer;
            transition: transform 0.2s;
        }
        .lesson-card:hover {
            transform: translateY(-3px);
        }
        .lesson-card.locked {
            background-color: #e0e0e0;
            cursor: not-allowed;
            border-color: #ccc;
            color: #999;
        }
        .lesson-card.completed {
            background-color: var(--dark-green);
            color: white;
            border-color: var(--dark-green);
        }
        .discount-code {
            background-color: var(--earth-tone);
            color: white;
            padding: 1rem;
            text-align: center;
            font-size: 1.2rem;
            font-weight: bold;
            border-radius: 5px;
            margin-top: 1rem;
        }
        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid #eee;
        }
        .cart-item-details {
            flex-grow: 1;
        }
        .quantity-controls button {
            background-color: var(--light-green);
            border: 1px solid var(--main-green);
            color: var(--dark-green);
            padding: 0.25rem 0.5rem;
            border-radius: 3px;
            margin: 0 0.25rem;
        }

        @media (min-width: 768px) {
            .farm-list, .product-list {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                gap: 1rem;
            }
        }
    </style>
</head>
<body>

    <header class="header">
        LOCAL.LY
    </header>

    <div id="home-page" class="page active">
        <h1 class="text-2xl font-bold mb-4 text-center text-dark-green">Entdecke regionale Höfe</h1>
        <div id="farm-list" class="farm-list">
            </div>
    </div>

    <div id="farm-detail-page" class="page">
        <button class="mb-4 button button-secondary" onclick="navigateTo('home-page')">&larr; Zurück zur Übersicht</button>
        <div id="farm-detail-content">
            </div>
        <h2 class="text-xl font-semibold mt-6 mb-3 text-dark-green">Produkte vom Hof:</h2>
        <div id="farm-products" class="product-list">
            </div>
    </div>

    <div id="cart-page" class="page">
        <h1 class="text-2xl font-bold mb-4 text-center text-dark-green">Dein Warenkorb</h1>
        <div id="cart-items-container">
            </div>
        <div id="cart-summary" class="mt-6 p-4 bg-white rounded-lg shadow">
            <div class="flex justify-between mb-2">
                <span>Zwischensumme:</span>
                <span id="cart-subtotal">0,00 €</span>
            </div>
            <div class="flex justify-between mb-2">
                <span>Rabatt:</span>
                <span id="cart-discount">0,00 €</span>
            </div>
            <div class="flex justify-between font-bold text-lg">
                <span>Gesamtsumme:</span>
                <span id="cart-total">0,00 €</span>
            </div>
            <div class="mt-4">
                <input type="text" id="discount-code-input" placeholder="Rabattcode eingeben" class="w-full p-2 border rounded mb-2">
                <button class="button w-full mb-2" onclick="applyDiscount()">Rabattcode anwenden</button>
            </div>
            <button id="checkout-button" class="button button-secondary w-full mt-2" onclick="checkout()">Zur Kasse</button>
        </div>
        <div id="checkout-message" class="mt-4 p-4 bg-green-100 text-green-700 rounded hidden">
            Vielen Dank für deine Bestellung! Deine regionalen Produkte sind bald auf dem Weg zu dir.
        </div>
    </div>

    <div id="quiz-page" class="page">
        <h1 class="text-2xl font-bold mb-4 text-center text-dark-green">Lerne & Spare!</h1>
        <p class="mb-6 text-center">Schließe Quiz-Lektionen ab, um mehr über regionale Landwirtschaft und gesunde Ernährung zu erfahren und Rabattcodes für deinen Einkauf zu erhalten!</p>
        <div id="quiz-lesson-list">
            </div>
    </div>

    <div id="quiz-lesson-page" class="page">
        <button class="mb-4 button button-secondary" onclick="navigateTo('quiz-page')">&larr; Zurück zu den Lektionen</button>
        <h2 id="quiz-lesson-title" class="text-xl font-bold mb-4 text-dark-green"></h2>
        <div id="quiz-question-container">
            </div>
        <div id="quiz-feedback" class="mt-4"></div>
        <button id="quiz-next-question-button" class="button mt-4 w-full" onclick="checkAnswer()">Antwort prüfen</button>
        <div id="quiz-completion-message" class="hidden mt-4">
            <p class="text-lg font-semibold text-green-600">Lektion abgeschlossen!</p>
            <p>Dein Rabattcode für diese Lektion:</p>
            <div id="revealed-discount-code" class="discount-code"></div>
            <button class="button button-secondary w-full mt-4" onclick="navigateTo('quiz-page')">Zurück zu den Lektionen</button>
        </div>
    </div>

    <nav class="nav-bar">
        <div class="nav-item active" id="nav-home" onclick="navigateTo('home-page')"><i class="fas fa-store"></i></div>
        <div class="nav-item" id="nav-quiz" onclick="navigateTo('quiz-page')"><i class="fas fa-graduation-cap"></i></div>
        <div class="nav-item" id="nav-cart" onclick="navigateTo('cart-page')">
            <i class="fas fa-shopping-basket"></i>
            <span id="cart-count" class="absolute top-0 right-0 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center" style="transform: translate(50%, -30%); display: none;">0</span>
        </div>
    </nav>

    <script>
        let cart = {}; 
        let quizProgress = {}; 
        let farmsData = []; 
        let quizData = []; 
        const discountNote = "Durch deinen Kauf bekommt der Bauer/Hof 30% mehr Einnahmen als wenn du es bei einem Supermarktkette gekauft hättest.";

        farmsData = [
            {
                id: "hof1",
                name: "Sonnenfeld Hof",
                image: "https://www.reise-idee.de/wp-content/uploads/urlaub-auf-dem-bauernhof.jpg",
                operator: "Familie Wagner",
                description: "Ein traditioneller Familienbetrieb, der seit Generationen biologisches Gemüse anbaut und Wert auf Artenvielfalt und geschlossene Nährstoffkreisläufe legt.",
                values: "Wir leben Nachhaltigkeit mit Herz und Hand. Unsere Felder sind ein Mosaik aus Farben und Leben, und das schmeckt man in jedem Bissen.",
                products: [
                    { id: "p1_1", name: "Kiste 'Ackergold'", content: "1kg Kartoffeln, 500g Karotten, 1 Kopfsalat, 1 Bund Radieschen, Saisongemüse", price: 16.00 },
                    { id: "p1_2", name: "Kiste 'Frische Ernte'", content: "Gemischte Salate der Saison, Tomaten, Gurken, frische Kräuter", price: 18.50 }
                ]
            },
            {
                id: "hof2",
                name: "Erdkraft Gärtnerei",
                image: "https://www.berchtenbreiter.de/Bilder-Webseite/Gaertnerei/139/image-thumb__139__hero/Ga%CC%88rtnerei%20Berchtenbreiter_-27.jpg",
                operator: "Das Gärtner-Kollektiv 'RegioGrün'",
                description: "Eine junge, innovative Gärtnerei, die sich auf seltene und alte Gemüsesorten spezialisiert hat und Permakultur-Prinzipien anwendet.",
                values: "Vielfalt ist unsere Stärke. Wir bewahren alte Sorten und fördern ein gesundes Bodenleben für nährstoffreiche Lebensmittel.",
                products: [
                    { id: "p2_1", name: "Kiste 'Sortenvielfalt'", content: "Lila Karotten, gestreifte Bete, Mangold, Postelein", price: 20.00 },
                    { id: "p2_2", name: "Kiste 'Kräuterhexe'", content: "Große Auswahl an Küchen- und Heilkräutern, frisch oder getrocknet", price: 15.00 }
                ]
            },
            {
                id: "hof3",
                name: "Quellbach Obstgut",
                image: "https://www.obstgut.de/wp-content/uploads/2023/11/apfelbaum.jpg",
                operator: "Johanna & Michael Stein",
                description: "Ein malerisch gelegenes Obstgut mit Streuobstwiesen und modernem Anbau von Beeren und Kernobst. Eigene Saftherstellung.",
                values: "Der pure Geschmack der Natur. Unsere Früchte reifen in der Sonne und werden mit Liebe von Hand geerntet.",
                products: [
                    { id: "p3_1", name: "Kiste 'Beerenstark'", content: "Saisonale Beerenmischung: Erdbeeren, Himbeeren, Blaubeeren etc.", price: 22.00 },
                    { id: "p3_2", name: "Kiste 'Apfeltraum'", content: "Verschiedene alte Apfelsorten, ca. 2.5kg", price: 14.00 }
                ]
            },
            {
                id: "hof4",
                name: "Wiesengrün Milchmanufaktur",
                image: "https://www.gut-aiderbichl.com/wp-content/uploads/2021/06/2021-05-10-gah-weidegang-rinder-19-lieni-und-willi-scaled.jpg",
                operator: "Familie Huber",
                description: "Ein Hof mit glücklichen Kühen auf saftigen Weiden. Die Milch wird direkt vor Ort zu Käse, Joghurt und anderen Spezialitäten verarbeitet.",
                values: "Tierwohl steht an erster Stelle. Unsere Milchprodukte sind so natürlich und frisch wie die Wiesen, auf denen unsere Tiere grasen.",
                products: [
                    { id: "p4_1", name: "Kiste 'Milchmädchen'", content: "1L Frischmilch, 500g Naturjoghurt, 250g Quark, 200g Frischkäse", price: 17.50 },
                    { id: "p4_2", name: "Kiste 'Käseglück'", content: "Auswahl von 3 Hofkäsesorten, ca. 450g", price: 24.00 }
                ]
            },
            {
                id: "hof5",
                name: "Kornkammer Bio-Landwirtschaft",
                image: "https://cdn.prod.website-files.com/5f96f3817909778fe85fe980/628cdfe6a02b483d64793e67_shutterstock_1494272252%20(1).jpg",
                operator: "Agrar-Gemeinschaft 'Goldene Ähre'",
                description: "Spezialisiert auf den Anbau von robusten Bio-Getreidesorten und Hülsenfrüchten. Ein Teil des Getreides wird direkt am Hof gemahlen.",
                values: "Vom Halm zum Brot – wir stehen für Transparenz und Qualität bei Getreideprodukten, die Kraft und Energie spenden.",
                products: [
                    { id: "p5_1", name: "Kiste 'Brotzeit'", content: "1kg Dinkelvollkornmehl, 500g Roggenmehl, 500g Linsen, 250g Sonnenblumenkerne", price: 19.00 },
                    { id: "p5_2", name: "Kiste 'Körner-Mix'", content: "Haferflocken, Buchweizen, Quinoa regional, Leinsamen", price: 15.50 }
                ]
            }
        ];

        quizData = [
            {
                id: "lesson1",
                title: "Lektion 1: Ökosystem Boden & Regenerative Landwirtschaft",
                questions: [
                    {
                        text: "Welcher der folgenden Prozesse ist am entscheidendsten für die langfristige Kohlenstoffsequestrierung in Ackerböden bei Umstellung auf Direktsaatverfahren in Kombination mit permanenten Zwischenfruchtmischungen?",
                        options: [
                            "A) Erhöhte Mineralisierung von leicht abbaubarer organischer Substanz durch veränderte Bodenfeuchte.",
                            "B) Reduzierte Stickstoffauswaschung und dadurch verbesserte Humusbildung.",
                            "C) Akkumulation von schwer abbaubarer organischer Substanz durch minimierte Bodenstörung und erhöhten Eintrag von Wurzelbiomasse.",
                            "D) Schnellere Zersetzung von Ernteresten an der Bodenoberfläche durch Regenwürmer."
                        ],
                        correctAnswerIndex: 2 
                    },
                    {
                        text: "Was versteht man unter Mykorrhiza und welche Rolle spielt sie vorrangig für Kulturpflanzen?",
                        options: [
                            "A) Eine Symbiose zwischen Pflanzenwurzeln und Bodenbakterien, die Stickstoff fixiert.",
                            "B) Eine parasitische Beziehung, bei der Pilze Nährstoffe von der Pflanze abziehen.",
                            "C) Eine Symbiose zwischen Pflanzenwurzeln und Pilzen, die die Nährstoff- und Wasseraufnahme der Pflanze verbessert.",
                            "D) Eine Gruppe von Bodentieren, die organisches Material zersetzen und den Boden lockern."
                        ],
                        correctAnswerIndex: 2 
                    },
                    {
                        text: "Die Aggregatstabilität des Bodens ist ein wichtiger Indikator für Bodengesundheit. Welcher Faktor wird durch konventionelle, intensive Bodenbearbeitung (z.B. Pflügen) am stärksten negativ beeinflusst?",
                        options: [
                            "A) Der Gehalt an primären Mineralien im Boden.",
                            "B) Die Aktivität von Tiefwurzlern und deren Einfluss auf die Bodenstruktur.",
                            "C) Der Gehalt an organischer Substanz und die Aktivität von Bodenmikroorganismen, die Aggregate bilden.",
                            "D) Die Sonneneinstrahlung und deren Einfluss auf die Bodentemperatur."
                        ],
                        correctAnswerIndex: 2 
                    },
                    {
                        text: "Welche Auswirkung hat eine vielfältige Fruchtfolge primär auf den Schädlings- und Krankheitsdruck im Vergleich zu Monokulturen?",
                        options: [
                            "A) Erhöhung des Drucks, da mehr Wirtspflanzen für diverse Schaderreger angeboten werden.",
                            "B) Keine signifikante Auswirkung, da Schaderreger meist hochspezialisiert sind.",
                            "C) Reduktion des Drucks durch Unterbrechung von Lebenszyklen spezifischer Schaderreger und Förderung von Nützlingen.",
                            "D) Verschiebung des Problems auf Unkräuter, die durch die Vielfalt besser gedeihen."
                        ],
                        correctAnswerIndex: 2 
                    },
                     {
                        text: "Bei der 'No-Till'-Landwirtschaft (Direktsaat) wird auf das Pflügen verzichtet. Welches ist ein oft genannter Nachteil in den ersten Umstellungsjahren in gemäßigten Klimazonen?",
                        options: [
                            "A) Signifikant höhere Erträge von Beginn an.",
                            "B) Stärkere Bodenerosion durch fehlende Einarbeitung von Pflanzenresten.",
                            "C) Langsamere Bodenerwärmung im Frühjahr und potenziell höherer Unkrautdruck.",
                            "D) Deutlich reduzierter Wasserbedarf der Kulturen."
                        ],
                        correctAnswerIndex: 2 
                    },
                    {
                        text: "Was ist der Hauptzweck des Anbaus von Leguminosen als Zwischenfrucht in einer regenerativen Fruchtfolge?",
                        options: [
                            "A) Primär die Unterdrückung von Unkräutern durch ihre schnelle Bodenbedeckung.",
                            "B) Die Anreicherung des Bodens mit atmosphärischem Stickstoff durch Knöllchenbakterien.",
                            "C) Die Lockerung tieferer Bodenschichten durch ihre Pfahlwurzeln.",
                            "D) Die Erhöhung des pH-Wertes saurer Böden."
                        ],
                        correctAnswerIndex: 1 
                    },
                    {
                        text: "Humus im Boden besteht aus verschiedenen Fraktionen. Welche Fraktion ist für die langfristige Nährstoffspeicherung und Bodenstruktur am wichtigsten?",
                        options: [
                            "A) Der Nährhumus (leicht abbaubare organische Substanz).",
                            "B) Der Dauerhumus (stabilisierte, schwer abbaubare organische Substanz).",
                            "C) Die lebende Biomasse der Mikroorganismen.",
                            "D) Frische, unzersetzte Pflanzenreste."
                        ],
                        correctAnswerIndex: 1 
                    }
                ],
                discountCode: "BODENFIT24"
            },
            {
                id: "lesson2", title: "Lektion 2: Biodiversität & Agrarökologie", questions: [], discountCode: "VIELFALT24"
            },
            {
                id: "lesson3", title: "Lektion 3: Wasserressourcen & Nachhaltigkeit", questions: [], discountCode: "WASSER24"
            },
            {
                id: "lesson4", title: "Lektion 4: Regionale Ernährungssysteme", questions: [], discountCode: "REGIOFOOD24"
            },
            {
                id: "lesson5", title: "Lektion 5: Nährwert & Saisonalität", questions: [], discountCode: "GESUND24"
            }
        ];
        quizData.forEach(lesson => {
            if (lesson.id !== "lesson1" && lesson.questions.length < 7) { // Fülle nur die leeren Lektionen
                for (let i = 0; i < 7; i++) {
                    lesson.questions.push({
                        text: `Beispielfrage ${i+1} für ${lesson.title}? (Platzhalter)`,
                        options: ["Antwort A", "Antwort B", "Antwort C", "Antwort D"],
                        correctAnswerIndex: Math.floor(Math.random() * 4)
                    });
                }
            }
        });

        let currentLessonId = null;
        let currentQuestionIndex = 0;
        let score = 0;
        let selectedOptionElement = null;

        function loadUserData() {
            const storedCart = localStorage.getItem('localLyCart');
            if (storedCart) {
                cart = JSON.parse(storedCart);
            } else {
                cart = {};
            }
            updateCartDisplay();

            const storedQuizProgress = localStorage.getItem('localLyQuizProgress');
            if (storedQuizProgress) {
                quizProgress = JSON.parse(storedQuizProgress);
            } else {
                quizProgress = {};
            }
            renderQuizLessons();
        }

        function saveCart() {
            localStorage.setItem('localLyCart', JSON.stringify(cart));
        }

        function saveQuizProgress() {
            localStorage.setItem('localLyQuizProgress', JSON.stringify(quizProgress));
        }

        const pages = document.querySelectorAll('.page');
        const navItems = document.querySelectorAll('.nav-item');

        function navigateTo(pageId) {
            pages.forEach(page => {
                page.classList.toggle('active', page.id === pageId);
            });
            navItems.forEach(item => {
                item.classList.toggle('active', item.id === `nav-${pageId.split('-')[0]}`);
            });
            window.scrollTo(0,0);

            if (pageId === 'cart-page') updateCartDisplay();
            if (pageId === 'quiz-page') renderQuizLessons();
            if (pageId === 'home-page' && !document.getElementById('farm-list').hasChildNodes()) renderFarmList();
            document.getElementById('checkout-message').classList.add('hidden');
        }

        function renderFarmList() {
            const farmListContainer = document.getElementById('farm-list');
            farmListContainer.innerHTML = ''; 
            farmsData.forEach(farm => {
                const card = document.createElement('div');
                card.className = 'card cursor-pointer';
                card.onclick = () => showFarmDetail(farm.id);
                card.innerHTML = `
                    <img src="${farm.image}" alt="${farm.name}" class="card-image">
                    <div class="card-content">
                        <h2 class="card-title">${farm.name}</h2>
                        <p class="text-sm text-gray-600">${farm.operator}</p>
                    </div>
                `;
                farmListContainer.appendChild(card);
            });
        }

        function showFarmDetail(farmId) {
            const farm = farmsData.find(f => f.id === farmId);
            if (!farm) return;

            const farmDetailContent = document.getElementById('farm-detail-content');
            farmDetailContent.innerHTML = `
                <img src="${farm.image}" alt="${farm.name}" class="w-full h-64 object-cover rounded-lg mb-4">
                <h1 class="text-3xl font-bold mb-2 text-dark-green">${farm.name}</h1>
                <p class="text-md text-gray-700 mb-1"><strong>Betreiber:</strong> ${farm.operator}</p>
                <p class="text-md text-gray-700 mb-3"><strong>Beschreibung:</strong> ${farm.description}</p>
                <p class="text-md text-gray-700 italic"><strong>Wofür sie stehen:</strong> "${farm.values}"</p>
            `;

            const farmProductsContainer = document.getElementById('farm-products');
            farmProductsContainer.innerHTML = '';
            farm.products.forEach(product => {
                const productCard = document.createElement('div');
                productCard.className = 'card';
                productCard.innerHTML = `
                    <div class="card-content">
                        <h3 class="card-title">${product.name}</h3>
                        <p class="text-sm text-gray-600 mb-2">${product.content}</p>
                        <p class="text-lg font-semibold text-earth-tone mb-1">${product.price.toFixed(2)} €</p>
                        <p class="product-price-note">${discountNote}</p>
                        <button class="button w-full mt-3" onclick="addToCart('${farm.id}', '${product.id}')">In den Warenkorb</button>
                    </div>
                `;
                farmProductsContainer.appendChild(productCard);
            });
            navigateTo('farm-detail-page');
        }

        function addToCart(farmId, productId) {
            const farm = farmsData.find(f => f.id === farmId);
            const product = farm.products.find(p => p.id === productId);

            if (cart[productId]) {
                cart[productId].quantity++;
            } else {
                cart[productId] = {
                    name: product.name,
                    price: product.price,
                    quantity: 1,
                    farmName: farm.name
                };
            }
            saveCart();
            updateCartDisplay();
            showToast(`${product.name} zum Warenkorb hinzugefügt!`);
        }

        function updateCartQuantity(productId, change) {
            if (cart[productId]) {
                cart[productId].quantity += change;
                if (cart[productId].quantity <= 0) {
                    delete cart[productId];
                }
            }
            saveCart();
            updateCartDisplay();
        }

        function removeFromCart(productId) {
            delete cart[productId];
            saveCart();
            updateCartDisplay();
        }

        let appliedDiscountCode = null;
        let discountPercentage = 0;

        function applyDiscount() {
            const codeInput = document.getElementById('discount-code-input').value.trim().toUpperCase();
            const lesson = quizData.find(l => l.discountCode === codeInput && quizProgress[l.id]?.completed);

            if (lesson) {
                appliedDiscountCode = codeInput;
                discountPercentage = 0.10; 
                showToast(`Rabattcode ${codeInput} erfolgreich angewendet! (10%)`, 'success');
            } else {
                appliedDiscountCode = null;
                discountPercentage = 0;
                showToast('Ungültiger Rabattcode oder Lektion nicht abgeschlossen.', 'error');
            }
            document.getElementById('discount-code-input').value = '';
            updateCartDisplay();
        }

        function updateCartDisplay() {
            const cartItemsContainer = document.getElementById('cart-items-container');
            cartItemsContainer.innerHTML = '';
            let subtotal = 0;
            let totalItems = 0;

            if (Object.keys(cart).length === 0) {
                cartItemsContainer.innerHTML = '<p class="text-gray-600">Dein Warenkorb ist leer.</p>';
                document.getElementById('checkout-button').disabled = true;
                document.getElementById('checkout-button').classList.add('opacity-50', 'cursor-not-allowed');
            } else {
                 document.getElementById('checkout-button').disabled = false;
                 document.getElementById('checkout-button').classList.remove('opacity-50', 'cursor-not-allowed');
            }

            for (const productId in cart) {
                const item = cart[productId];
                subtotal += item.price * item.quantity;
                totalItems += item.quantity;

                const itemElement = document.createElement('div');
                itemElement.className = 'cart-item';
                itemElement.innerHTML = `
                    <div class="cart-item-details">
                        <p class="font-semibold">${item.name} <span class="text-xs text-gray-500">(${item.farmName})</span></p>
                        <p class="text-sm text-gray-600">${item.price.toFixed(2)} € x ${item.quantity}</p>
                    </div>
                    <div class="quantity-controls">
                        <button onclick="updateCartQuantity('${productId}', -1)">-</button>
                        <span>${item.quantity}</span>
                        <button onclick="updateCartQuantity('${productId}', 1)">+</button>
                    </div>
                    <button class="ml-4 text-red-500 hover:text-red-700" onclick="removeFromCart('${productId}')"><i class="fas fa-trash"></i></button>
                `;
                cartItemsContainer.appendChild(itemElement);
            }

            const discountAmount = subtotal * discountPercentage;
            const total = subtotal - discountAmount;

            document.getElementById('cart-subtotal').textContent = `${subtotal.toFixed(2)} €`;
            document.getElementById('cart-discount').textContent = `-${discountAmount.toFixed(2)} €`;
            document.getElementById('cart-total').textContent = `${total.toFixed(2)} €`;

            const cartCountElement = document.getElementById('cart-count');
            if (totalItems > 0) {
                cartCountElement.textContent = totalItems;
                cartCountElement.style.display = 'flex';
            } else {
                cartCountElement.style.display = 'none';
            }
        }

        function checkout() {
            if (Object.keys(cart).length === 0) {
                showToast("Dein Warenkorb ist leer.", "error");
                return;
            }
            cart = {}; 
            appliedDiscountCode = null; 
            discountPercentage = 0;
            saveCart(); 
            updateCartDisplay();
            document.getElementById('checkout-message').classList.remove('hidden');
            setTimeout(() => {
                 document.getElementById('checkout-message').classList.add('hidden');
            }, 5000);
        }

        function renderQuizLessons() {
            const lessonListContainer = document.getElementById('quiz-lesson-list');
            lessonListContainer.innerHTML = '';
            let previousLessonCompleted = true;

            quizData.forEach((lesson, index) => {
                const lessonCard = document.createElement('div');
                lessonCard.className = 'lesson-card';
                let statusText = "Starten";
                let icon = '<i class="fas fa-play-circle mr-2"></i>';

                if (quizProgress[lesson.id]?.completed) {
                    lessonCard.classList.add('completed');
                    statusText = "Abgeschlossen";
                    icon = '<i class="fas fa-check-circle mr-2"></i>';
                } else if (index > 0 && !quizProgress[quizData[index-1].id]?.completed) { // Check if previous lesson is completed
                    lessonCard.classList.add('locked');
                    statusText = "Gesperrt";
                    icon = '<i class="fas fa-lock mr-2"></i>';
                }


                lessonCard.innerHTML = `
                    <h3 class="text-lg font-semibold">${lesson.title}</h3>
                    <p>${statusText}</p>
                    ${icon}
                `;

                if (!lessonCard.classList.contains('locked')) {
                    lessonCard.onclick = () => startQuizLesson(lesson.id);
                }
                lessonListContainer.appendChild(lessonCard);
            });
        }

        function startQuizLesson(lessonId) {
            currentLessonId = lessonId;
            currentQuestionIndex = 0;
            score = 0;
            selectedOptionElement = null; 
            const lesson = quizData.find(l => l.id === lessonId);
            document.getElementById('quiz-lesson-title').textContent = lesson.title;
            document.getElementById('quiz-completion-message').classList.add('hidden');
            const nextButton = document.getElementById('quiz-next-question-button');
            nextButton.textContent = "Antwort prüfen";
            nextButton.disabled = false; 
            nextButton.onclick = checkAnswer;

            displayQuestion();
            navigateTo('quiz-lesson-page');
        }

        function displayQuestion() {
            selectedOptionElement = null; // Reset for new question
            const lesson = quizData.find(l => l.id === currentLessonId);
            const question = lesson.questions[currentQuestionIndex];
            const questionContainer = document.getElementById('quiz-question-container');
            
            questionContainer.innerHTML = `
                <p class="font-semibold mb-3">${currentQuestionIndex + 1}. ${question.text}</p>
                <div id="quiz-options">
                    ${question.options.map((option, index) => `
                        <label class="quiz-option" data-index="${index}">
                            <input type="radio" name="quizOption" class="sr-only">
                            ${option}
                        </label>
                    `).join('')}
                </div>
            `;
            
            const quizOptions = questionContainer.querySelectorAll('.quiz-option');
            quizOptions.forEach(opt => {
                opt.onclick = (event) => {
                    // Allow changing selection as long as answer hasn't been checked
                    if (document.getElementById('quiz-next-question-button').textContent === "Antwort prüfen") {
                        quizOptions.forEach(o => o.classList.remove('selected'));
                        event.currentTarget.classList.add('selected');
                        selectedOptionElement = event.currentTarget;
                    }
                };
            });

            document.getElementById('quiz-feedback').innerHTML = '';
            const nextButton = document.getElementById('quiz-next-question-button');
            nextButton.textContent = "Antwort prüfen";
            nextButton.disabled = false;
            nextButton.onclick = checkAnswer;
        }

        function checkAnswer() {
            if (!selectedOptionElement) {
                showToast("Bitte wähle eine Antwort aus.", "error");
                return;
            }

            const lesson = quizData.find(l => l.id === currentLessonId);
            const question = lesson.questions[currentQuestionIndex];
            const selectedAnswerIndex = parseInt(selectedOptionElement.dataset.index);
            const feedbackEl = document.getElementById('quiz-feedback');
            const allOptions = document.querySelectorAll('#quiz-options .quiz-option');

            // Disable further clicks on options for this question
            allOptions.forEach(opt => opt.onclick = null); 

            if (selectedAnswerIndex === question.correctAnswerIndex) {
                selectedOptionElement.classList.add('correct');
                feedbackEl.innerHTML = '<p class="text-green-600 font-semibold">Richtig!</p>';
                score++;
            } else {
                selectedOptionElement.classList.add('incorrect');
                allOptions[question.correctAnswerIndex].classList.add('correct'); // Show correct answer
                feedbackEl.innerHTML = `<p class="text-red-600 font-semibold">Leider falsch. Die richtige Antwort war: ${question.options[question.correctAnswerIndex].substring(0,1)}</p>`;
            }

            const nextButton = document.getElementById('quiz-next-question-button');
            nextButton.textContent = "Nächste Frage";
            nextButton.onclick = nextQuestion;
            if (currentQuestionIndex >= lesson.questions.length - 1) {
                nextButton.textContent = "Lektion abschließen";
            }
        }

        function nextQuestion() {
            currentQuestionIndex++;
            const lesson = quizData.find(l => l.id === currentLessonId);
            if (currentQuestionIndex < lesson.questions.length) {
                displayQuestion();
            } else {
                // Quiz lesson finished
                const requiredScore = Math.ceil(lesson.questions.length * 0.7); 
                const completionMessageEl = document.getElementById('quiz-completion-message');
                const revealedCodeEl = document.getElementById('revealed-discount-code');
                
                if (score >= requiredScore) {
                     quizProgress[currentLessonId] = { completed: true, score: score };
                     saveQuizProgress();
                     revealedCodeEl.textContent = lesson.discountCode;
                     completionMessageEl.querySelector('p.text-lg').textContent = `Lektion erfolgreich abgeschlossen! (${score}/${lesson.questions.length} richtig)`;
                } else {
                     completionMessageEl.querySelector('p.text-lg').textContent = `Lektion nicht bestanden (${score}/${lesson.questions.length} richtig). Versuche es erneut!`;
                     revealedCodeEl.textContent = "Kein Rabattcode diesmal.";
                }
                completionMessageEl.classList.remove('hidden');
                document.getElementById('quiz-question-container').innerHTML = '';
                document.getElementById('quiz-feedback').innerHTML = '';
                document.getElementById('quiz-next-question-button').disabled = true;
            }
        }

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.textContent = message;
            toast.className = 'fixed bottom-20 left-1/2 transform -translate-x-1/2 p-4 rounded-lg shadow-lg text-white z-[2000]';
            if (type === 'success') {
                toast.style.backgroundColor = 'var(--dark-green)';
            } else if (type === 'error') {
                toast.style.backgroundColor = '#F44336'; 
            } else {
                toast.style.backgroundColor = 'var(--earth-tone)'; 
            }
            document.body.appendChild(toast);
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        document.addEventListener('DOMContentLoaded', () => {
            loadUserData(); 
            renderFarmList(); 
            navigateTo('home-page'); 
        });
    </script>
</body>
</html>